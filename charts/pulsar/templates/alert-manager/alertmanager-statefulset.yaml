#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.monitoring.alert_manager }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.alert_manager.component }}"
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.alert_manager.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.alert_manager.component }}"
  replicas: {{ .Values.alert_manager.replicaCount }}
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.alert_manager.component }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.alert_manager.component }}
      annotations:
{{- with .Values.alert_manager.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
    {{- if .Values.alert_manager.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.alert_manager.nodeSelector | indent 8 }}
     {{- end }}
     {{- if .Values.alert_manager.tolerations }}
      tolerations:
{{ toYaml .Values.alert_manager.tolerations | indent 8 }}
     {{- end }}
      terminationGracePeriodSeconds: {{ .Values.alert_manager.gracePeriod }}
      initContainers:
      - name: config
        image: "{{ .Values.alert_manager.init.image.repository }}:{{ .Values.alert_manager.init.image.tag }}"
        imagePullPolicy: {{ .Values.alert_manager.init.image.pullPolicy }}
        command: ['sh', '-c']
        args:
          - >
            for file in $(ls -A /tmpl/ | grep tmpl); do
              newfile=${file%".tmpl"};
              envsubst < /tmpl/$file > /etc/config/$newfile;
            done
        volumeMounts:
          - name: tmpl-volume
            mountPath: /tmpl
            readOnly: true
          - name: config-volume
            mountPath: /etc/config
        envFrom:
          - secretRef:
              name: {{ .Values.alert_manager.init.envFromSecret }}
      containers:
      {{- if .Values.configmapReload.alertmanager.enabled }}
      - name: {{ template "pulsar.fullname" . }}-{{ .Values.alert_manager.component }}-{{ .Values.alert_manager.config_reloader.name }}
        image: "{{ .Values.alert_manager.config_reloader.image.repository }}:{{ .Values.alert_manager.config_reloader.image.tag }}"
        imagePullPolicy: "{{ .Values.alert_manager.config_reloader.image.pullPolicy }}"
        command: ["bash", "-c"]
        args:
          - >
            inotifywait -m -r -e delete --format '%f' /tmpl/ |
            while read file; do
              if [[ "$file" =~ .*tmpl$ ]]; then
                sleep 1;
                newfile=${file%".tmpl"};
                envsubst < /tmpl/$file > /etc/config/$newfile;
              fi
            done
        resources:
{{ toYaml .Values.configmapReload.alertmanager.resources | indent 12 }}
        volumeMounts:
          - name: tmpl-volume
            mountPath: /tmpl
            readOnly: true
          - name: config-volume
            mountPath: /etc/config
        envFrom:
          - secretRef:
              name: {{ .Values.alert_manager.init.envFromSecret }}
      - name: {{ template "pulsar.fullname" . }}-{{ .Values.alert_manager.component }}-{{ .Values.configmapReload.alertmanager.name }}
        image: "{{ .Values.configmapReload.alertmanager.image.repository }}:{{ .Values.configmapReload.alertmanager.image.tag }}"
        imagePullPolicy: "{{ .Values.configmapReload.alertmanager.image.pullPolicy }}"
        args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:{{ .Values.alert_manager.port }}{{ template "pulsar.control_center_path.alertmanager" . }}/-/reload
        resources:
{{ toYaml .Values.configmapReload.alertmanager.resources | indent 12 }}
        volumeMounts:
          - name: config-volume
            mountPath: /etc/config
            readOnly: true
      {{- end }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.alert_manager.component }}"
        image: "{{ .Values.images.alert_manager.repository }}:{{ .Values.images.alert_manager.tag }}"
        imagePullPolicy: {{ .Values.images.alert_manager.pullPolicy }}
       {{- if .Values.alert_manager.resources }}
        resources:
{{ toYaml .Values.alert_manager.resources | indent 10 }}
       {{- end }}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        args:
          - --config.file=/etc/config/alertmanager.yml
          - --cluster.advertise-address=$(POD_IP):6783
          - --storage.path=/alertmanager
  {{- if and .Values.ingress.control_center.enabled .Values.ingress.control_center.endpoints.alertmanager }}
          - --web.external-url={{ template "pulsar.control_center_url" . }}{{ template "pulsar.control_center_path.alertmanager" . }}/
  {{- end }}
        ports:
        - name: server
          containerPort: {{ .Values.alert_manager.port }}
        {{- if .Values.alert_manager.probe.readiness.enabled }}
        readinessProbe:
          httpGet:
            path: {{ template "pulsar.control_center_path.alertmanager" . }}/-/ready
            port: {{ .Values.alert_manager.port }}
          initialDelaySeconds: {{ .Values.alert_manager.probe.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.alert_manager.probe.readiness.periodSeconds }}
          failureThreshold: {{ .Values.alert_manager.probe.readiness.failureThreshold }}
        {{- end }}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
      volumes:
      - name: tmpl-volume
        configMap:
          name: "{{ template "pulsar.fullname" . }}-{{ .Values.alert_manager.component }}"
      - name: config-volume
        emptyDir: {}
{{- end }}
