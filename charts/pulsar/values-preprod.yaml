namespace: pulsar-preprod

images:
  zookeeper:
    tag: 2.7.2
  bookie:
    tag: 2.7.2
  presto:
    tag: 2.7.2
  autorecovery:
    tag: 2.7.2
  broker:
    tag: 2.7.2
  proxy:
    tag: 2.7.2
  pulsar_detector:
    tag: 2.7.2
  functions:
    tag: 2.7.2
#  prometheus:
#    tag: v2.21.0

zookeeper:
  resources:
    limits:
      memory: 384Mi
      cpu: 125m
    requests:
      memory: 384Mi
      cpu: 125m
  volumes:
    data:
      size: 5Gi
    dataLog:
      size: 1Gi
  configData:
    PULSAR_MEM: >
      -Xms192m -Xmx384m

bookkeeper:
  metadata:
    resources:
      limits:
        cpu: 250m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 2Gi
  resources:
    limits:
      cpu: 250m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 2Gi
  volumes:
    journal:
      size: 5Gi
    ledgers:
      size: 15Gi
  configData:
    # `BOOKIE_MEM` is used for `bookie shell`
    BOOKIE_MEM: >
      -Xms512m
      -Xmx1g
      -XX:MaxDirectMemorySize=1g
    # we use `bin/pulsar` for starting bookie daemons
    PULSAR_MEM: >
      -Xms1g
      -Xmx2g
      -XX:MaxDirectMemorySize=2g

autorecovery:
  resources:
    limits:
      cpu: 125m
      memory: 384Mi
    requests:
      cpu: 125m
      memory: 384Mi
  configData:
    BOOKIE_MEM: >
      -Xms128m -Xmx256m

#pulsar_metadata:
#  image:
#    tag: 2.6.0

broker:
  resources:
    limits:
      cpu: 250m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 1Gi
  configData:
    PULSAR_MEM: >
      -Xms512m -Xmx1g -XX:MaxDirectMemorySize=1g
    managedLedgerDefaultEnsembleSize: "2"
    managedLedgerDefaultWriteQuorum: "2"
    managedLedgerDefaultAckQuorum: "2"

proxy:
  resources:
    limits:
      cpu: 125m
      memory: 512Mi
    requests:
      cpu: 125m
      memory: 512Mi
  configData:
    PULSAR_MEM: >
      -Xms256m -Xmx512m -XX:MaxDirectMemorySize=512m

#toolset:
#  resources:
#    limits:
#      memory: 256Mi
#      cpu: 0.1
#    requests:
#      memory: 256Mi
#      cpu: 0.1

prometheus:
  resources:
    limits:
      memory: 4Gi
      cpu: 500m
    requests:
      memory: 4Gi
      cpu: 500m
  volumes:
    data:
      size: 15Gi

grafana:
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
    # targetPort: 4181 To be used with a proxy extraContainer
    annotations: {}
    labels: {}
    portName: service

  ingress:
    enabled: true
    ingressClassName: nginx-alb
    hosts:
      - pulsar-grafana-preprod.singlespot.com
  #    limits:
  #      memory: 250Mi
  #      cpu: 0.1
  #    requests:
  #      memory: 250Mi
  #      cpu
#  reso: 0.1
  env:
    GF_SERVER_ROOT_URL: "https://pulsar-grafana-preprod.singlespot.com"
#  persistence:
#    size: 1Gi
#  sidecar:
#    resources:
#      limits:
#        cpu: 100m
#        memory: 100Mi
#      requests:
#        cpu: 100m
#        memory: 100Mi

pulsar_manager:
#  resources:
#    limits:
#      memory: 250Mi
#      cpu: 0.1
#    requests:
#      memory: 250Mi
#      cpu: 0.1
  service:
    type: ClusterIP
    spec: {}
    annotations: {}
    ports:
      frontend: 80
  ingress:
    enabled: true

  redirect:
    host: pulsar-manager-preprod.singlespot.com
#  volumes:
#    data:
#      size: 1Gi

#presto:
#  coordinator:
#    resources:
#      limits:
#        memory: 4Gi
#        cpu: 2
#      requests:
#        memory: 4Gi
#        cpu: 2
#  worker:
#    resources:
#      limits:
#        memory: 4Gi
#        cpu: 2
#      requests:
#        memory: 4Gi
#        cpu: 2

alert_manager:
  rules:
    groups:
      - name: Nodes
        rules:
          - alert: HostOutOfDiskSpace
            expr: (node_filesystem_avail_bytes{mountpoint="/rootfs"}  * 100) / node_filesystem_size_bytes{mountpoint="/rootfs"} < 10
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Host out of disk space (instance {{ $labels.instance }})"
              description: "Disk is almost full (< 10% left)\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: HostHighCpuLoad
            expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Host high CPU load (instance {{ $labels.instance }})"
              description: "CPU load is > 80%\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"

      - name: Containers
        rules:
          - alert: ContainerKilled
            expr: time() - container_last_seen > 60
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Container killed (instance {{ $labels.instance }})"
              description: "A container has disappeared\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: ContainerVolumeUsage
            expr: (1 - (sum(container_fs_inodes_free) BY (instance) / sum(container_fs_inodes_total) BY (instance)) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Container Volume usage (instance {{ $labels.instance }})"
              description: "Container Volume usage is above 80%\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"

      - name: Kubernetes
        rules:
          - alert: KubernetesNodeReady
            expr: kube_node_status_condition{condition="Ready",status="true"} == 0
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes Node ready (instance {{ $labels.instance }})"
              description: "Node {{ $labels.node }} has been unready for a long time\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesMemoryPressure
            expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes memory pressure (instance {{ $labels.instance }})"
              description: "{{ $labels.node }} has MemoryPressure condition\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesDiskPressure
            expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes disk pressure (instance {{ $labels.instance }})"
              description: "{{ $labels.node }} has DiskPressure condition\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesOutOfDisk
            expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes out of disk (instance {{ $labels.instance }})"
              description: "{{ $labels.node }} has OutOfDisk condition\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesJobFailed
            expr: kube_job_status_failed > 0
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes Job failed (instance {{ $labels.instance }})"
              description: "Job {{$labels.namespace}}/{{$labels.exported_job}} failed to complete\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesCronjobSuspended
            expr: kube_cronjob_spec_suspend != 0
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes CronJob suspended (instance {{ $labels.instance }})"
              description: "CronJob {{ $labels.namespace }}/{{ $labels.cronjob }} is suspended\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesPersistentvolumeclaimPending
            expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes PersistentVolumeClaim pending (instance {{ $labels.instance }})"
              description: "PersistentVolumeClaim {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is pending\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesVolumeOutOfDiskSpace
            expr: kubelet_volume_stats_available_bytes / kubelet_volume_stats_capacity_bytes * 100 < 10
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes Volume out of disk space (instance {{ $labels.instance }})"
              description: "Volume is almost full (< 10% left)\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesPersistentVolumeError
            expr: kube_persistentvolume_status_phase{phase=~"Failed|Pending",job="kube-state-metrics"} > 0
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes PersistentVolume error (instance {{ $labels.instance }})"
              description: "Persistent volume is in bad state\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesStatefulsetDown
            expr: (kube_statefulset_status_replicas_ready / kube_statefulset_status_replicas_current) != 1
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes StatefulSet down (instance {{ $labels.instance }})"
              description: "A StatefulSet went down\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesHpaMetricAvailability
            expr: kube_hpa_status_condition{condition="false", status="ScalingActive"} == 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes HPA metric availability (instance {{ $labels.instance }})"
              description: "HPA is not able to collect metrics\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesPodNotHealthy
            expr: min_over_time(max by (kubernetes_node, namespace, pod) (kube_pod_status_phase{phase=~"Pending|Unknown|Failed"})[5m:]) == 1
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes Pod not healthy (instance {{ $labels.kubernetes_node }})"
              description: "Pod has been in a non-ready state for longer than 5 minutes.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesPodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total[15m]) * 60 * 5 > 5
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes pod crash looping (instance {{ $labels.instance }})"
              description: "Pod {{ $labels.pod }} is crash looping\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesDeploymentGenerationMismatch
            expr: kube_deployment_status_observed_generation != kube_deployment_metadata_generation
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes Deployment generation mismatch (instance {{ $labels.instance }})"
              description: "A Deployment has failed but has not been rolled back.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesStatefulsetGenerationMismatch
            expr: kube_statefulset_status_observed_generation != kube_statefulset_metadata_generation
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes StatefulSet generation mismatch (instance {{ $labels.instance }})"
              description: "A StatefulSet has failed but has not been rolled back.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesStatefulsetUpdateNotRolledOut
            expr: max without (revision) (kube_statefulset_status_current_revision unless kube_statefulset_status_update_revision) * (kube_statefulset_replicas != kube_statefulset_status_replicas_updated)
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes StatefulSet update not rolled out (instance {{ $labels.instance }})"
          - alert: KubernetesDaemonsetRolloutStuck
            expr: kube_daemonset_status_number_ready / kube_daemonset_status_desired_number_scheduled * 100 < 100 or kube_daemonset_status_desired_number_scheduled - kube_daemonset_status_current_number_scheduled > 0
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes DaemonSet rollout stuck (instance {{ $labels.instance }})"
              description: "Some Pods of DaemonSet are not scheduled or not ready\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesDaemonsetMisscheduled
            expr: kube_daemonset_status_number_misscheduled > 0
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes DaemonSet misscheduled (instance {{ $labels.instance }})"
              description: "Some DaemonSet Pods are running where they are not supposed to run\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesCronjobTooLong
            expr: time() - kube_cronjob_next_schedule_time > 3600
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes CronJob too long (instance {{ $labels.instance }})"
              description: "CronJob {{ $labels.namespace }}/{{ $labels.cronjob }} is taking more than 1h to complete.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesJobCompletion
            expr: kube_job_spec_completions - kube_job_status_succeeded > 0 or kube_job_status_failed > 0
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes job completion (instance {{ $labels.instance }})"
              description: "Kubernetes Job failed to complete\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesApiServerErrors
            expr: sum(rate(apiserver_request_count{job="apiserver",code=~"^(?:5..)$"}[2m])) / sum(rate(apiserver_request_count{job="apiserver"}[2m])) * 100 > 3
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes API server errors (instance {{ $labels.instance }})"
              description: "Kubernetes API server is experiencing high error rate\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesApiClientErrors
            expr: (sum(rate(rest_client_requests_total{code=~"(4|5).."}[2m])) by (instance, job) / sum(rate(rest_client_requests_total[2m])) by (instance, job)) * 100 > 1
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes API client errors (instance {{ $labels.instance }})"
              description: "Kubernetes API client is experiencing high error rate\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesClientCertificateExpiresNextWeek
            expr: apiserver_client_certificate_expiration_seconds_count{job="apiserver"} > 0 and histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job="apiserver"}[5m]))) < 7*24*60*60
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes client certificate expires next week (instance {{ $labels.instance }})"
              description: "A client certificate used to authenticate to the apiserver is expiring next week.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesClientCertificateExpiresSoon
            expr: apiserver_client_certificate_expiration_seconds_count{job="apiserver"} > 0 and histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job="apiserver"}[5m]))) < 24*60*60
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "Kubernetes client certificate expires soon (instance {{ $labels.instance }})"
              description: "A client certificate used to authenticate to the apiserver is expiring in less than 24.0 hours.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: KubernetesApiServerLatency
            expr: histogram_quantile(0.99, sum(apiserver_request_latencies_bucket{verb!~"CONNECT|WATCHLIST|WATCH|PROXY"}) WITHOUT (instance, resource)) / 1e+06 > 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes API server latency (instance {{ $labels.instance }})"
              description: "Kubernetes API server has a 99th percentile latency of {{ $value }} seconds for {{ $labels.verb }} {{ $labels.resource }}.\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
          - alert: CorednsPanicCount
            expr: increase(coredns_panic_count_total[10m]) > 0
            for: 5m
            labels:
              severity: error
            annotations:
              summary: "CoreDNS Panic Count (instance {{ $labels.instance }})"
              description: "Number of CoreDNS panics encountered\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
      - name: Pulsar
        rules:
          - alert: PulsarStorageTooHigh
            annotations:
              description: |-
                Pulsar storage size is above 30GB
                  VALUE = {{ $value }}
                  LABELS: {{ $labels }}
              summary: Pulsar storage size
            expr: sum(pulsar_storage_size) > 30000000000
            for: 5m
            labels:
              severity: error

prometheusJobs:
  - jobName: copy-api
    host: data-stream-copy-statsd.pulsar-services-preprod.svc.cluster.local
  - jobName: geocoding-api
    host: geocoding-api-statsd.pulsar-services-preprod.svc.cluster.local
  - jobName: producer-api
    host: data-stream-producer-statsd.pulsar-services-preprod.svc.cluster.local

servicesNamespace: pulsar-services-preprod
